
  l = [1,2,34,5]
求最大数 max(l)
>>34
  all()       函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。  元素除了是 0、空、FALSE 外都算 TRUE。 例如
all([1,True,True])
>>True
  列表切片[::-1]倒叙输出
l = [1,2,3,4]
l[::-1]

>>[4,3,2,1]
  count()返回指定值的元素数量
list.count(vaule)      vaule:任何类型（字符串、数字、列表、元组等
  bin(x)     将整数转换为前缀为“0b”的二进制字符串。结果是一个有效的python表达式。如果x不是python int对象，它必须定义一个返回整数的索引方法。
  max min sort 中key=lambda x:x[0] 
例 max(C, key=lambda x: x[0]) lambda匿名函数      x 输入       x[0] 按x的一维排列
x : (a,b) 按a排列，如遇到a相等时，按b排列（a为主，b为辅）
num = [(1,2.5), (1.5, 3.2), (1.3, 4.0), (2.2, 1.8)] 
y,z = max(num, key=lambda x:x[0]) 
print(y, z)
>>2.2 1.8

  " / "就表示 浮点数除法，返回浮点结果;" // "表示整数除法
  for in 除了遍历数字还可以遍历字符串列表
s = 'I love you more than i can say' 
for i in s:     
print(i)
>>列 I love you more than i can say
l = ['123', '234', '345'] 
for i in l:     
print(i)
>>123
  234
  345
  
list.index(obj) 返回值： 该方法返回查找对象的索引位置，如果没有找到对象则抛出异常。
.* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符
re.match(pattern, string, flags=0)     re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。
使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。
group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。
groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。                详见菜鸟教程！！！！！
  flags 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：
re.I 忽略大小写 
re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境 
re.M 多行模式 
re.S 即为' . '并且包括换行符在内的任意字符（' . '不包括换行符）
re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库 
re.X 为了增加可读性，忽略空格和' # '后面的注释

表1.常用的元字符 
代码 说明 
.   匹配除换行符以外的任意字符 
\w  匹配字母或数字或下划线或汉字 
\s  匹配任意的空白符 
\d  匹配数字 
\b  匹配单词的开始或结束 
^   匹配字符串的开始 
$   匹配字符串的结束

表2.常用的限定符 
代码  说明 
*     重复零次或更多次 
+     重复一次或更多次 
?     重复零次或一次 
{n}   重复n次
{n,}  重复n次或更多次 
{n,m} 重复n到m次


表3.常用的反义代码
代码/语法	 说明
\W	      匹配任意不是字母，数字，下划线，汉字的字符
\S      	匹配任意不是空白符的字符
\D	      匹配任意非数字的字符
\B	      匹配不是单词开头或结束的位置
[^x]	    匹配除了x以外的任意字符
[^aeiou]	匹配除了aeiou这几个字母以外的任意字符

表4.常用分组语法
分类      代码/语法       说明 
捕获      (exp)         匹配exp,并捕获文本到自动命名的组里 (?<name>exp) 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp) 
         (?:exp)         匹配exp,不捕获匹配的文本，也不给此分组分配组号 
零宽断言  (?=exp)       匹配exp前面的位置 (?<=exp) 匹配exp后面的位置 
         (?!exp)        匹配后面跟的不是exp的位置
         (?<!exp)       匹配前面不是exp的位置 
注释      (?#comment)   这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读

表5.懒惰限定符
代码/语法	  说明
*?	      重复任意次，但尽可能少重复
+?	      重复1次或更多次，但尽可能少重复
??	      重复0次或1次，但尽可能少重复
{n,m}?	  重复n到m次，但尽可能少重复
{n,}?	    重复n次以上，但尽可能少重复
